<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans\spring-beans.xsd
      http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context\spring-context.xsd
        http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop\spring-aop.xsd
          http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx\spring-tx.xsd ">

	<!-- 扫包 -->
	<context:component-scan base-package="com.bus.service"></context:component-scan>

	<context:property-placeholder location="classpath:db.properties" />
	<!-- 1:配置连接池 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${driver}"></property>
		<property name="url" value="${url}"></property>
		<property name="username" value="${user}"></property>
		<property name="password" value="${password}"></property>
	</bean>

	<!--spring,mybatis整合 2:配置sqlSessionFactory -->
	<bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:Mybatis.xml"></property>
	</bean>

	<!-- mapper动态代理方式二:扫包方式 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.bus.mapper"></property>
	</bean>

	<!-- spring的事务处理xml配置 -->
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 2:打开aop注解开关,注解驱动 -->
	<tx:annotation-driven />
	<!-- ========================== shiro的配置 ================================= -->
	<!-- 1:加密管理器 -->
	<!-- <bean name="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="md5"></property>
		<property name="hashIterations" value="1"></property>
	</bean>
	2:配置自定义的realm
	<bean name="realm" class="com.bus.shiro.MyRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher"></property>
	</bean>
	3:配置安全管理器
	<bean name="securityManager"
		class="org.apache.shiro.mgt.DefaultSecurityManager">
		<property name="realm" ref="realm"></property>
	</bean>
	4:配置shiro的过滤器
	<bean name="shiroFilter"
		class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"></property>
		<property name="loginUrl" value="index.action"></property>
		<property name="unauthorizedUrl" value="toShioError.action"></property>
		<property name="filterChainDefinitions">
			<value>
				/index.action = anon
				/index.jsp = anon
				/changeLanguage.action = anon
				/login.action = anon
				/css/** = anon
				/assets/** = anon
				/img/** = anon
				/javascript = anon
				//** = authc
			</value>
		</property> 

	</bean>-->

</beans>
	